The "0-add_integer.py" module
======================

Using "add_integer"
-------------------

>>> add_integer = __import__('0-add_integer').add_integer

Normal cases:
>>> add_integer(6, 8)
14
>>> add_integer(-35000000,234444)
-34765556
>>> add_integer(35000000,-234444)
34765556
>>> add_integer(1e100,3)
10000000000000000159028911097599180468360808563945281389781327557747838772170381060813469985856815107
>>> add_integer(3)
101
>>> add_integer(3,)
101

Float cases:
>>> add_integer(3.4, -6.8)
-3
>>> add_integer(7.34444444444,2.3333333)
9

Error cases:
>>> add_integer("a", 5)
Traceback (most recent call last):
TypeError: a must be an integer
>>> add_integer(4, "b")
Traceback (most recent call last):
TypeError: b must be an integer
>>> add_integer(None,3)
Traceback (most recent call last):
TypeError: a must be an integer
>>> add_integer(4,None)
Traceback (most recent call last):
TypeError: b must be an integer
>>> add_integer([2,3],3)
Traceback (most recent call last):
TypeError: a must be an integer
>>> add_integer(4,[1,2,3,4])
Traceback (most recent call last):
TypeError: b must be an integer
>>> add_integer(float('inf'),3)
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer
>>> add_integer(float('nan'),3)
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
>>> add_integer(6j, 8)
Traceback (most recent call last):
TypeError: a must be an integer
>>> add_integer(6, 8j)
Traceback (most recent call last):
TypeError: b must be an integer
